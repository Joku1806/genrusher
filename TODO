- Tests für IDA* Algorithmus schreiben
- Tests für Board Repository schreiben

- Board:
	- Heuristik BlockersLowerBound implementieren
	- Heuristik GoalDistance implementieren
	- Heuristik Hybrid implementieren
	- Heuristik NumberOfSiblings implementieren
	- weirde Idee: "Meta-Heuristiken", die Aussagen über eigene Regeln machen
	
- Brain: nötige Informationen für Heuristiken hinzufügen

- AST:
	- Methode normalize(), um AST auf eine kanonische Repräsentation zu normalisieren
		- De Morgan Gesetze, andere Äquivalenzen
		- Constant Folding
		- Dead Branch Elimination
		- aufsplitten und sortieren von Terminal Values (Leaf Nodes) anhand von Hash
	- es ist auch möglich zu zählen, wie oft ein Subtree zu true ausgewertet wird,
	  um diese Analyse dynamisch während der Runtime zu machen. Subtrees, die entweder
	  zu häufig oder wenig ausgewertet werden, können einfach entfernt werden.
	  Das ist wahrscheinlich einfacher zu implementieren und erkennt auch Fälle,
	  die nicht statisch eliminiert werden können (z.B. unmögliche Vergleiche mit Heuristiken).
	- Terminals und Operators an die aus Paper anpassen
	- Logic Operator Leaf Node Spezialfall entfernen, weil es jetzt zwei Terminals (Heuristiken) gibt,
	  die Booleans zurückgeben.
	- Hit Counter für Boolean Subexpressions implementieren, kann dafür benutzt werden, nicht oft benutzte
	  Regeln zu entfernen
	- Weg finden, die Wichtigkeit einer Regel für eine schnelle Lösung bzw. die Genauigkeit der Regel zu messen.
	  Kann dafür benutzt werden, bevorzugt suboptimale Regeln zu entfernen/mutieren/kombinieren.

- Agent implementieren
	- neues Problem aus BoardRepository auswählen
	- Fitness Funktion
	- Rückschreiben in BoardRepository, falls verbesserte Lösung

- Generation Manager schreiben
	- braucht Liste an Agenten
	- Tournament Selection Algorithmus schreiben
	- Crossover Algorithmus für 2 Agenten schreiben
		- Methode für Kombination, unveränderte Übernahme von Regeln finden
		- Methode schreiben, um Ähnlichkeit von zwei Regeln zu bestimmen
			- statische Analyse von ähnlichen Teilen nach Normalisierung
			- Anwendung von Regeln auf n Boards, Summe von MSE als Ähnlichkeitsmaß
		- vielleicht Maß für Effizienz von Regeln, Beitrag zu guten Lösungen finden
			- braucht wahrscheinlich extra Code im Agent
	- Mutations Algorithmus für Agent schreiben
